{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","actions","addContact","createAction","removeContact","filterChange","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","allContacts","name","toLowerCase","includes","ContactForm","useState","setName","phone","setPhone","id","setId","useSelector","dispatch","useDispatch","handleChangeForm","target","value","uuidv4","resetForm","onSubmit","event","preventDefault","find","contact","onCheckUnique","alert","className","s","form","formInput","type","placeholder","onChange","ContactList","useEffect","localStorage","setItem","JSON","stringify","length","listContact","map","onClick","Filter","App","style","fontSize","createReducer","parse","getItem","action","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4790cf2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listContact\":\"ContactList_listContact__1C2eJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3259t\"};","// import types from './contacts-types';\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"ADDCONTACT\");\r\nconst removeContact = createAction(\"REMOVECONTACT\");\r\nconst filterChange = createAction(\"CHANGE_FILTER\");\r\n\r\nconst actions = { addContact, removeContact, filterChange };\r\nexport default actions;\r\n\r\n//  const addContact = newContact => ({\r\n//     type: types.ADDCONTACT,\r\n//     payload: newContact,\r\n// });\r\n// const removeContact = id => ({\r\n//     type: types.REMOVECONTACT,\r\n//     payload: id,\r\n// });\r\n// const filterChange = filter => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: filter,\r\n// });\r\n// export default { addContact, removeContact, filterChange };\r\n","export const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n};\r\n","import { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport s from './ContactForm.module.css';\r\n// import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { getContacts } from '../../redux/contacts/selectors';\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [id, setId] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChangeForm = ({ target }) => {\r\n    // console.log(target);\r\n    const { name, value } = target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'phone':\r\n        setPhone(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    setId(uuidv4());\r\n  };\r\n    const onCheckUnique = name => {\r\n    const existContact = contacts.find(contact => contact.name === name);\r\n    return existContact;\r\n  };\r\n  // const handleFormSubmite = event => {\r\n  //   event.preventDefault();\r\n  //   onCheckUnique(name)\r\n  //     ? alert('Contact is exists')\r\n  //     : onAdd({ id, name, phone });\r\n  //   resetForm();\r\n  // };\r\nconst handleFormSubmite = event => {\r\n    event.preventDefault();\r\n    onCheckUnique(name)\r\n      ? alert('Contact is exists')\r\n      : dispatch(actions.addContact({id,name,phone}));\r\n    resetForm();\r\n  };\r\n  const resetForm = () => {\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmite} className={s.form}>\r\n      <label className={s.formInput}>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Enter name\"\r\n          value={name}\r\n          onChange={handleChangeForm}\r\n        ></input>\r\n      </label>\r\n      <label className={s.formInput}>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          placeholder=\"Enter phone\"\r\n          value={phone}\r\n          onChange={handleChangeForm}\r\n        ></input>\r\n      </label>\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n};\r\nexport default ContactForm;\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: state.contacts.items,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onAdd: newContact=>dispatch(actions.addContact(newContact)),\r\n// })\r\n// export default connect(mapStateToProps,mapDispatchToProps)(ContactForm)","import s from \"./ContactList.module.css\";\r\nimport { useEffect } from 'react';\r\nimport actions from \"../../redux/contacts/contacts-actions.js\";\r\n// import { connect } from \"react-redux\";\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onRemove = (id) => dispatch(actions.removeContact(id));\r\n   useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n  if (contacts.length === 0) return null;\r\n  return (\r\n    <ul className={s.listContact}>\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          {contact.name}:{contact.phone}\r\n          <button onClick={() => onRemove(contact.id)}>Delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nexport default ContactList;\r\n// const visibleContacts = (allContacts, filter) => {\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n//   contacts: visibleContacts(items, filter),\r\n// });\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onRemove: (id) => dispatch(actions.removeContact(id)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n","// import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={s.filter}>\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={({ target }) =>dispatch(actions.filterChange(target.value))}\r\n        placeholder=\"Enter name for search\"\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\nexport default Filter;\r\n// const mapStateToProps = state => ({\r\n//   filter: state.contacts.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: filter => dispatch(actions.filterChange(filter))\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","// import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactForm from './components/ContactForm/ContactForm.js';\nimport ContactList from './components/ContactList/ContactList.js';\nimport Filter from './components/Filter/Filter.js';\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(() => {\n  //   return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  // });\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const handleAddContact = newContact => {\n  //   // console.log(newContact);\n  //   setContacts([...contacts, newContact]);\n  // };\n\n  // const handleCheckUniqueContact = name => {\n  //   const existContact = contacts.find(contact => contact.name === name);\n  //   return existContact;\n  // };\n\n  // const handleRemoveContact = id => {\n  //   setContacts(contacts.filter(contact => contact.id !== id));\n  // };\n\n  // const handleFilterChange = filter => setFilter(filter);\n\n  // const visibleContacts = contacts.filter(function (contact) {\n  //   return contact.name.toLowerCase().includes(filter.toLowerCase());\n  // });\n\n  return (\n    <div>\n      <h2 style={{ fontSize: 40 }}>Form Contact</h2>\n      <ContactForm\n        // onAdd={handleAddContact}\n        // onCheckUnique={handleCheckUniqueContact}\n      ></ContactForm>\n      <h2 style={{ fontSize: 40 }}>Contacts</h2>\n      {/* <Filter filter={filter} onChange={handleFilterChange}></Filter> */}\n      <Filter/>\n      <ContactList\n        // contacts={visibleContacts}\n        // onRemove={handleRemoveContact}\n      ></ContactList>\n    </div>\n  );\n}\n","import { combineReducers } from \"redux\";\r\nimport actions from \"./contacts-actions.js\";\r\n// import types from './contacts-types.js';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst items = createReducer(\r\n  ( JSON.parse(localStorage.getItem(\"contacts\")) ?? []),\r\n  {\r\n    [actions.addContact]: (state, action) => [...state, action.payload],\r\n    [actions.removeContact]: (state, action) =>\r\n      state.filter(({ id }) => id !== action.payload),\r\n  }\r\n);\r\nconst filter = createReducer(\"\", {\r\n  [actions.filterChange]: (_, action) => action.payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const items = (state = JSON.parse(localStorage.getItem('contacts')) ?? [], { type, payload }) => {\r\n//     // console.log(payload);\r\n//     switch (type) {\r\n//         case types.ADDCONTACT:\r\n//             return [...state, payload];\r\n//         case types.REMOVECONTACT:\r\n//             return state.filter(({ id }) => id !== payload);\r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n","// import { combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer.js';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts:contactsReducer,\r\n    },\r\n    devTools:process.env.NODE_ENV==='development',\r\n})\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport store from './redux/store.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3VoQo\",\"formInput\":\"ContactForm_formInput__2oph6\"};"],"sourceRoot":""}